package com.rozet.contract.wrappers;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticArray;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class Rozet extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_TIERFOURREQUIREMENT = "tierFourRequirement";

    public static final String FUNC_SETPROFILE = "setProfile";

    public static final String FUNC_ADDRESSTOPROFILE = "addressToProfile";

    public static final String FUNC_GETPROFILE = "getProfile";

    public static final String FUNC_GETVALIDBENEFICIARIES = "getValidBeneficiaries";

    public static final String FUNC_ALLBADGES = "allBadges";

    public static final String FUNC_NUMBEROFTRUSTEDSPONSORS = "numberOfTrustedSponsors";

    public static final String FUNC_RECEIVEDSPONSORS = "receivedSponsors";

    public static final String FUNC_GETADDRESSFROMNAME = "getAddressFromName";

    public static final String FUNC_RECEIVEDSPONSORSITERABLE = "receivedSponsorsIterable";

    public static final String FUNC_ISSUEBADGEFROMSIGNATURE = "issueBadgeFromSignature";

    public static final String FUNC_RECEIVEDBADGES = "receivedBadges";

    public static final String FUNC_HASENOUGHSTAKETOISSUE = "hasEnoughStakeToIssue";

    public static final String FUNC_NAMETOADDRESS = "nameToAddress";

    public static final String FUNC_ISSUEBADGE = "issueBadge";

    public static final String FUNC_USERSBADGES = "usersBadges";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_HASENOUGHSTAKETORECEIVE = "hasEnoughStakeToReceive";

    public static final String FUNC_SETTRUSTEDSPONSOR = "setTrustedSponsor";

    public static final String FUNC_GETDNSFEE = "getDNSFee";

    public static final String FUNC_RECEIVEBADGE = "receiveBadge";

    public static final String FUNC_TIERTHREEREQUIREMENT = "tierThreeRequirement";

    public static final String FUNC_GETNAMEFROMADDRESS = "getNameFromAddress";

    public static final String FUNC_TIERTWOREQUIREMENT = "tierTwoRequirement";

    public static final String FUNC_GETBADGEBYID = "getBadgeById";

    public static final String FUNC_BADGESOF = "badgesOf";

    public static final String FUNC_TRUSTEDSPONSORS = "trustedSponsors";

    public static final String FUNC_ADDRESSTONAME = "addressToName";

    public static final String FUNC_ROZETTOKEN = "rozetToken";

    public static final String FUNC_GETTRUSTEDSPONSORS = "getTrustedSponsors";

    public static final String FUNC_ISSUEDBADGES = "issuedBadges";

    public static final Event BADGEISSUED_EVENT = new Event("BadgeIssued", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BADGERECEIVED_EVENT = new Event("BadgeReceived", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Rozet(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Rozet(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> tierFourRequirement() {
        final Function function = new Function(FUNC_TIERFOURREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setProfile(String _country, String _url, String _banner, String _bio, String _data1, String _data2) {
        final Function function = new Function(
                FUNC_SETPROFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_country), 
                new org.web3j.abi.datatypes.Utf8String(_url), 
                new org.web3j.abi.datatypes.Utf8String(_banner), 
                new org.web3j.abi.datatypes.Utf8String(_bio), 
                new org.web3j.abi.datatypes.Utf8String(_data1), 
                new org.web3j.abi.datatypes.Utf8String(_data2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<String, String, String, String, String, String, String>> addressToProfile(String param0) {
        final Function function = new Function(FUNC_ADDRESSTOPROFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<String, String, String, String, String, String, String>>(
                new Callable<Tuple7<String, String, String, String, String, String, String>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<String, String, String, String, String, String>> getProfile(String user) {
        final Function function = new Function(FUNC_GETPROFILE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, String, String, String, String, String>>(
                new Callable<Tuple6<String, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<String, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<List> getValidBeneficiaries(String profile) {
        final Function function = new Function(FUNC_GETVALIDBENEFICIARIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(profile)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>> allBadges(BigInteger param0) {
        final Function function = new Function(FUNC_ALLBADGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>>(
                new Callable<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> numberOfTrustedSponsors() {
        final Function function = new Function(FUNC_NUMBEROFTRUSTEDSPONSORS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> receivedSponsors(String param0, String param1) {
        final Function function = new Function(FUNC_RECEIVEDSPONSORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getAddressFromName(byte[] _name) {
        final Function function = new Function(FUNC_GETADDRESSFROMNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> receivedSponsorsIterable(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_RECEIVEDSPONSORSITERABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> issueBadgeFromSignature(BigInteger v, byte[] r, byte[] s, String sender, String recipient, String beneficiary, String data) {
        final Function function = new Function(
                FUNC_ISSUEBADGEFROMSIGNATURE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s), 
                new org.web3j.abi.datatypes.Address(sender), 
                new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.Address(beneficiary), 
                new org.web3j.abi.datatypes.Utf8String(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> receivedBadges(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_RECEIVEDBADGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> hasEnoughStakeToIssue(String user) {
        final Function function = new Function(FUNC_HASENOUGHSTAKETOISSUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> nameToAddress(byte[] param0) {
        final Function function = new Function(FUNC_NAMETOADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> issueBadge(String _sender, String _recipient, String _beneficiary, String _data) {
        final Function function = new Function(
                FUNC_ISSUEBADGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sender), 
                new org.web3j.abi.datatypes.Address(_recipient), 
                new org.web3j.abi.datatypes.Address(_beneficiary), 
                new org.web3j.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> usersBadges(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_USERSBADGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setName(byte[] DNSName) {
        final Function function = new Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(DNSName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> hasEnoughStakeToReceive(String user) {
        final Function function = new Function(FUNC_HASENOUGHSTAKETORECEIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setTrustedSponsor(String sponsor, BigInteger index) {
        final Function function = new Function(
                FUNC_SETTRUSTEDSPONSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(sponsor), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getDNSFee() {
        final Function function = new Function(FUNC_GETDNSFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> receiveBadge(BigInteger badgeId, String _recipientData) {
        final Function function = new Function(
                FUNC_RECEIVEBADGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(badgeId), 
                new org.web3j.abi.datatypes.Utf8String(_recipientData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tierThreeRequirement() {
        final Function function = new Function(FUNC_TIERTHREEREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<byte[]> getNameFromAddress(String _address) {
        final Function function = new Function(FUNC_GETNAMEFROMADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> tierTwoRequirement() {
        final Function function = new Function(FUNC_TIERTWOREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>> getBadgeById(BigInteger id) {
        final Function function = new Function(FUNC_GETBADGEBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>>(
                new Callable<Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<String, String, String, String, String, Boolean, Boolean, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<List> badgesOf(String user) {
        final Function function = new Function(FUNC_BADGESOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> trustedSponsors(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_TRUSTEDSPONSORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<byte[]> addressToName(String param0) {
        final Function function = new Function(FUNC_ADDRESSTONAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> rozetToken() {
        final Function function = new Function(FUNC_ROZETTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getTrustedSponsors(String user) {
        final Function function = new Function(FUNC_GETTRUSTEDSPONSORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> issuedBadges(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_ISSUEDBADGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Rozet> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _addressOfRozetToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressOfRozetToken)));
        return deployRemoteCall(Rozet.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Rozet> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _addressOfRozetToken) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_addressOfRozetToken)));
        return deployRemoteCall(Rozet.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<BadgeIssuedEventResponse> getBadgeIssuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADGEISSUED_EVENT, transactionReceipt);
        ArrayList<BadgeIssuedEventResponse> responses = new ArrayList<BadgeIssuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadgeIssuedEventResponse typedResponse = new BadgeIssuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sponsor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.senderData = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BadgeIssuedEventResponse> badgeIssuedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, BadgeIssuedEventResponse>() {
            @Override
            public BadgeIssuedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADGEISSUED_EVENT, log);
                BadgeIssuedEventResponse typedResponse = new BadgeIssuedEventResponse();
                typedResponse.log = log;
                typedResponse.sponsor = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.recipient = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.senderData = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BadgeIssuedEventResponse> badgeIssuedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADGEISSUED_EVENT));
        return badgeIssuedEventObservable(filter);
    }

    public List<BadgeReceivedEventResponse> getBadgeReceivedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BADGERECEIVED_EVENT, transactionReceipt);
        ArrayList<BadgeReceivedEventResponse> responses = new ArrayList<BadgeReceivedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BadgeReceivedEventResponse typedResponse = new BadgeReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receipient = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.recipientData = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BadgeReceivedEventResponse> badgeReceivedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, BadgeReceivedEventResponse>() {
            @Override
            public BadgeReceivedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BADGERECEIVED_EVENT, log);
                BadgeReceivedEventResponse typedResponse = new BadgeReceivedEventResponse();
                typedResponse.log = log;
                typedResponse.receipient = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.recipientData = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BadgeReceivedEventResponse> badgeReceivedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BADGERECEIVED_EVENT));
        return badgeReceivedEventObservable(filter);
    }

    public static Rozet load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Rozet(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Rozet load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Rozet(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class BadgeIssuedEventResponse {
        public Log log;

        public String sponsor;

        public String recipient;

        public BigInteger id;

        public String senderData;
    }

    public static class BadgeReceivedEventResponse {
        public Log log;

        public String receipient;

        public BigInteger id;

        public String recipientData;
    }
}
